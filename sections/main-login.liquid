<style>
  .new {
    margin-left: 200px;
  }
  .new p {
    display: flex;
    font-weight:400;
    font-size:16px;
  }

  /* Wrapper for each input field */
  .field {
    display: flex;
    flex-direction: column;
    margin-bottom: 1.5rem;
    width:710px;
    }

  /* Styling for the label */
  .field__label {
    font-size: 16px;
    font-weight: 400;
    margin-bottom: 0.5rem;
    color: #333;
  }

  /* Styling for the input field */
  .field__input {
    padding: 16px 20px;
    font-size: 16px;
    border: 1px solid #ccc;
    border-radius: 4px;
    line-height:150%;
    {% comment %} width: 100%;
    height: 50px; /* Adjusted height */
    box-sizing: border-box; {% endcomment %}
  }

  /* Input focus effect */
  .field__input:focus {
    border-color: #007bff;
    outline: none;
    box-shadow: 0 0 4px rgba(0, 123, 255, 0.3);
  }
</style>

{{ 'customer.css' | asset_url | stylesheet_tag }}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}

{%- if section.settings.enable_shop_login_button == false -%}
  {%- assign hide_shop_login_button = true -%}
{%- endif -%}

<div class="customer login section-{{ section.id }}-padding">
  <h1 id="recover" tabindex="-1">
    {{ 'customer.recover_password.title' | t }}
  </h1>
  <div>
    <p>
      {{ 'customer.recover_password.subtext' | t }}
    </p>

    {%- form 'recover_customer_password' -%}
      {% assign recover_success = form.posted_successfully? %}
      <div class="field">
        <label for="RecoverEmail" class="field__label">
          {{ 'customer.login_page.email' | t }}
        </label>
        <input
          type="email"
          value=""
          name="email"
          id="RecoverEmail"
          autocorrect="off"
          autocapitalize="off"
          autocomplete="email"
          class="field__input"
          {% if form.errors %}
            aria-invalid="true"
            aria-describedby="RecoverEmail-email-error"
            autofocus
          {% endif %}
        >
      </div>
      {%- if form.errors -%}
        <small id="RecoverEmail-email-error" class="form__message">
          <span class="svg-wrapper">
            {{- 'icon-error.svg' | inline_asset_content -}}
          </span>
          {{ form.errors.messages.form }}
        </small>
      {%- endif -%}

      <button>
        {{ 'customer.login_page.submit' | t }}
      </button>

      <a href="#login">
        {{ 'customer.login_page.cancel' | t }}
      </a>
    {%- endform -%}
  </div>

  <h2 id="login" tabindex="-1">
    {% comment %} {{ 'customer.login_page.title' | t }} {% endcomment %}
     Login
  </h2>
  <div>
    {%- if recover_success == true -%}
      <h3 class="form__message" tabindex="-1" autofocus>
        <span class="svg-wrapper">
          {{- 'icon-success.svg' | inline_asset_content -}}
        </span>
        {{ 'customer.recover_password.success' | t }}
      </h3>
    {%- endif -%}
    {%- form 'customer_login', novalidate: 'novalidate' -%}
      {%- if form.errors -%}
        <h2 class="form__message" tabindex="-1" autofocus>
          <span class="visually-hidden">{{ 'accessibility.error' | t }} </span>
          <span class="svg-wrapper">
            {{- 'icon-error.svg' | inline_asset_content -}}
          </span>
          {{ 'templates.contact.form.error_heading' | t }}
        </h2>
        {{ form.errors | default_errors }}
      {%- endif -%}

      {%- if shop.features.login_with_shop_classic_customer_accounts? -%}
        <section name="sign-in-with-shop-provider">
          {{ shop | login_button: hide_button: hide_shop_login_button }}

          {%- unless hide_shop_login_button -%}
            <p>
              {{ 'customer.login_page.alternate_provider_separator' | t }}
            </p>
          {%- endunless -%}
        </section>
      {%- endif -%}

      <div class="field">
        <label for="CustomerEmail" class="field__label">
          Email
        </label>
        <input
          type="email"
          value="" 
          name="customer[email]"
          id="CustomerEmail"
          placeholder="Email"
          autocomplete="off"
          autocorrect="off"
          autocapitalize="off"
          class="field__input"
          pattern="[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
          required
          title="Please enter a valid email address"
        >
        <small id="CustomerEmail-error" class="form__message" style="color: red; display: none;">
          Please enter a valid email address.
        </small>
      </div>
      
      <div class="field">
        <label for="CustomerPassword" class="field__label">
          Password
        </label>
        <input
          type="password"         
          value="" 
          name="customer[password]"
          id="CustomerPassword"
          placeholder="Password"
          autocomplete="off"
          class="field__input"
          minlength="8"
          required
          title="Password must be at least 8 characters long"
        >
        <small id="CustomerPassword-error" class="form__message" style="color: red; display: none;">
          Password must be at least 8 characters long.
        </small>
      </div>
      
      
      <a href="#recover">
        {{ 'customer.login_page.forgot_password' | t }}
      </a>
      
      <button type="submit">
        Login
      </button>
      
<div class="new">
      <p>
        Don't have an Account? 
        <a href="{{ routes.account_register_url }}">
         Sign Up
        </a>
      </p>
 </div>
    {%- endform -%}
  </div>

  {%- if shop.checkout.guest_login -%}
    <div>
      <hr>
      <h2>{{ 'customer.login_page.guest_title' | t }}</h2>

      {%- form 'guest_login' -%}
        <button>
          {{ 'customer.login_page.guest_continue' | t }}
        </button>
      {%- endform -%}
    </div>
  {%- endif -%}
</div>

{% schema %}
{
  "name": "t:sections.main-login.name",
  "settings": [
    {
      "type": "checkbox",
      "id": "enable_shop_login_button",
      "label": "t:sections.main-login.shop_login_button.enable",
      "default": true
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ]
}
{% endschema %}
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.querySelector('form[novalidate]');
    const emailInput = document.getElementById('CustomerEmail');
    const passwordInput = document.getElementById('CustomerPassword');
    const emailError = document.getElementById('CustomerEmail-error');
    const passwordError = document.getElementById('CustomerPassword-error');
    let emailTouched = false;
    let passwordTouched = false;

    // Function to validate email
    const validateEmail = () => {
      if (emailTouched) {
        if (emailInput.validity.valueMissing) {
          emailError.textContent = 'Email is required.';
          emailError.style.display = 'block';
        } else if (!emailInput.validity.valid) {
          emailError.textContent = 'Please enter a valid email address.';
          emailError.style.display = 'block';
        } else {
          emailError.style.display = 'none';
        }
      }
    };

    // Function to validate password
    const validatePassword = () => {
      if (passwordTouched) {
        if (passwordInput.validity.valueMissing) {
          passwordError.textContent = 'Password is required.';
          passwordError.style.display = 'block';
        } else if (passwordInput.validity.tooShort) {
          passwordError.textContent = 'Password must be at least 8 characters long.';
          passwordError.style.display = 'block';
        } else {
          passwordError.style.display = 'none';
        }
      }
    };

    // Mark fields as touched on blur
    emailInput.addEventListener('blur', () => {
      emailTouched = true;
      validateEmail();
    });

    passwordInput.addEventListener('blur', () => {
      passwordTouched = true;
      validatePassword();
    });

    // Validate on input
    emailInput.addEventListener('input', validateEmail);
    passwordInput.addEventListener('input', validatePassword);

    // Form submission validation
    form.addEventListener('submit', (event) => {
      emailTouched = true;
      passwordTouched = true;
      validateEmail();
      validatePassword();

      // Prevent form submission if validation fails
      if (!emailInput.validity.valid || !passwordInput.validity.valid) {
        event.preventDefault();
      }
    });
  });
</script>
